msgid ""
msgstr "MIME-Version: 1.0\n"

#. Name.
msgid "Zen Cache"
msgstr ""

#. Short description.
msgid "ZenCache is an advanced WordPress caching plugin inspired by simplicity. Speed up your site (BIG time!) with a reliable and fast WordPress cache."
msgstr ""

#. Screenshot description.
msgid "Step 1: Enable ZenCache #1"
msgstr ""

#. Screenshot description.
msgid "Step 2: Save All Changes; that's it! #2"
msgstr ""

#. Screenshot description.
msgid "One-click Clear Cache button #3"
msgstr ""

#. Screenshot description.
msgid "Intelligent and automatic cache clearing #4"
msgstr ""

#. Screenshot description.
msgid "Directory / Expiration Time #5"
msgstr ""

#. Screenshot description.
msgid "Client-Side Cache #6"
msgstr ""

#. Screenshot description.
msgid "GET Requests #7"
msgstr ""

#. Screenshot description.
msgid "404 Requests #8"
msgstr ""

#. Screenshot description.
msgid "RSS, RDF, and Atom Feeds #9"
msgstr ""

#. Screenshot description.
msgid "URI Exclusion Patterns #10"
msgstr ""

#. Screenshot description.
msgid "HTTP Referrer Exclusion Patterns #11"
msgstr ""

#. Screenshot description.
msgid "User-Agent Exclusion Patterns #12"
msgstr ""

#. Screenshot description.
msgid "GZIP Compression #13"
msgstr ""

#. Screenshot description.
msgid "Theme/Plugin Developers #14"
msgstr ""

#. Found in description header.
msgid "Features"
msgstr ""

#. Found in description header, remaining content header.
msgid "Pro Features"
msgstr ""

#. Found in description list item.
msgid "SIMPLE and well-documented configuration (just enable and you're all set!)."
msgstr ""

#. Found in description list item.
msgid "Options to control the automatic cache clearing behavior for Home and Posts Page, Author Page, Category, Tag, and Custom Term Archives, Custom Post Type Archives, RSS/RDF/ATOM Feeds, and XML Sitemaps."
msgstr ""

#. Found in description list item.
msgid "URI exclusion patterns (now supporting wildcards too)."
msgstr ""

#. Found in description list item.
msgid "User-Agent exclusion patterns (now supporting wildcards too)."
msgstr ""

#. Found in description list item.
msgid "HTTP referrer exclusion patterns (now supporting wildcards too)."
msgstr ""

#. Found in description list item.
msgid "The ability to set an automatic expiration time for cache files."
msgstr ""

#. Found in description list item.
msgid "Client-Side Caching (to allow double-caching in the client-side browser)."
msgstr ""

#. Found in description list item.
msgid "Caching for 404 requests to reduce the impact of those requests on the server."
msgstr ""

#. Found in description list item.
msgid "RSS, RDF, and Atom Feed caching."
msgstr ""

#. Found in description list item.
msgid "The ability to cache or ignore URLs that contain query strings (GET Requests)."
msgstr ""

#. Found in description list item.
msgid "An Advanced Cache Plugin system for theme and plugin developers."
msgstr ""

#. Found in description list item, remaining content list item.
msgid "The ability to cache logged-in users too! (VERY powerful, particularly for membership sites)."
msgstr ""

#. Found in description list item, remaining content list item.
msgid "A new improved \"Clear Cache\" button in the admin bar (along with an option to enable/disable this feature)."
msgstr ""

#. Found in description list item, remaining content list item.
msgid "The ability to disable Dashboard notifications related to automatic clearing/purging on change detections."
msgstr ""

#. Found in description list item, remaining content list item.
msgid "The ability to clear Markdown-related cache files generated by the s2Clean theme for WordPress (if installed)."
msgstr ""

#. Found in description list item, remaining content list item.
msgid "The ability to run custom PHP code whenever the cache is cleared."
msgstr ""

#. Found in description list item, remaining content list item.
msgid "Import/Export functionality for ZenCache configuration files."
msgstr ""

#. Found in description list item, remaining content list item.
msgid "A Dynamic Version Salt (customize the caching engine)."
msgstr ""

#. Found in description list item, remaining content list item.
msgid "HTML Compressor to automatically combine and compresses CSS/JS/HTML code."
msgstr ""

#. Found in description list item, remaining content list item.
msgid "Auto-Cache Engine to pre-cache your site at 15-minute intervals."
msgstr ""

#. Found in description list item, remaining content list item.
msgid "Static CDN Filters to serve some and/or ALL static files on your site from a CDN of your choosing, including support for Multiple CDN Host Names, Domain Sharding, and WordPress Multisite Networks."
msgstr ""

#. Found in description list item, remaining content list item.
msgid "An Automatic Updater to update ZenCache Pro from your WordPress Dashboard."
msgstr ""

#. Found in description list item, remaining content list item.
msgid "Rockstar support for all ZenCache features."
msgstr ""

#. Found in description paragraph, remaining content paragraph.
msgid "If you care about the speed of your site, ZenCache is one of those plugins that you absolutely MUST have installed :-) ZenCache takes a real-time snapshot (building a cache) of every Page, Post, Category, Link, etc. These snapshots are then stored (cached) intuitively, so they can be referenced later, in order to save all of that processing time that has been dragging your site down and costing you money."
msgstr ""

#. Found in description paragraph, remaining content paragraph.
msgid "The ZenCache plugin uses configuration options that you select from the options panel. See: <strong>ZenCache -› Options</strong> in your Dashboard. Once a file has been cached, ZenCache uses advanced techniques that allow it to recognize when it should and should not serve a cached version of the file. By default, ZenCache does not serve cached pages to users who are logged in, or to users who have left comments recently. ZenCache also excludes administrative pages, login pages, POST/PUT/DELETE/GET(w/ query string) requests and/or CLI processes."
msgstr ""

#. Found in description paragraph.
msgid "TIP: you can preview Pro features in the free version by clicking the \"Preview Pro Features\" link at the top of your ZenCache options."
msgstr ""

#. Found in installation header.
msgid "ZenCache is Very Easy to Install"
msgstr ""

#. Found in installation header.
msgid "How will I know ZenCache is Working?"
msgstr ""

#. Found in installation header, remaining content header.
msgid "Running ZenCache On A WordPress® Multisite Installation"
msgstr ""

#. Found in installation header, remaining content header.
msgid "EMERGENCY: If All Else Fails (How-To Remove ZenCache)"
msgstr ""

#. Found in installation list item.
msgid "Upload the <code>/zencache</code> folder to your <code>/wp-content/plugins/</code> directory."
msgstr ""

#. Found in installation list item.
msgid "Activate the plugin through the Plugins menu in WordPress®."
msgstr ""

#. Found in installation list item.
msgid "Navigate to the <strong>ZenCache</strong> panel &amp; enable it."
msgstr ""

#. Found in installation list item, faq list item, remaining content list item.
msgid "Log into your site via FTP; perhaps using <a href=\"http://www.youtube.com/watch?v=joXUMhr8PhU\">FileZilla</a>."
msgstr ""

#. Found in installation list item, faq list item, remaining content list item.
msgid "Delete this file: <code>/wp-content/advanced-cache.php</code>"
msgstr ""

#. Found in installation list item, faq list item, remaining content list item.
msgid "Delete this directory: <code>/wp-content/plugins/zencache/</code>"
msgstr ""

#. Found in installation list item, faq list item, remaining content list item.
msgid "Remove this line from your <code>/wp-config.php</code> file: <code>define('WP_CACHE', TRUE);</code>"
msgstr ""

#. Found in installation paragraph.
msgid "<strong>Quick Tip:</strong> WordPress® can only deal with one cache plugin being activated at a time. Please uninstall any existing cache plugins that you've tried in the past. In other words, if you've installed W3 Total Cache, WP Super Cache, DB Cache Reloaded, or any other caching plugin, uninstall them all before installing ZenCache. One way to check, is to make sure this file: <code>wp-content/advanced-cache.php</code> and/or <code>wp-content/object-cache.php</code> are NOT present; and if they are, delete these files BEFORE installing ZenCache. Those files will only be present if you have a caching plugin already installed. If you don't see them, you're ready to install ZenCache :-)."
msgstr ""

#. Found in installation paragraph.
msgid "<strong>A note for existing Quick Cache users:</strong> ZenCache is the successor to Quick Cache and will automatically detect any existing Quick Cache options and migrate that options over to ZenCache. For further details, please see the <a href=\"http://zencache.com/kb-article/how-to-migrate-from-quick-cache-lite-to-zencache-lite/\">migration FAQ</a>."
msgstr ""

#. Found in installation paragraph.
msgid "First of all, make sure that you've enabled ZenCache. After you activate the plugin in WordPress, go to the ZenCache options panel and enable caching (you can't miss the big yellow checkbox). Then scroll to the bottom and click Save All Changes. All of the other options on that page are already pre-configured for typical usage. Skip them all for now. You can go back through all of these later and fine-tune things the way you like them."
msgstr ""

#. Found in installation paragraph, faq paragraph.
msgid "Once ZenCache has been enabled, <strong>you'll need to log out</strong> (and/or clear browser cookies). Cache files are NOT served to visitors who are logged in, and that includes you too :-) Cache files are NOT served to recent commenters either. If you've commented (or replied to a comment lately); please clear your browser cookies before testing."
msgstr ""

#. Found in installation paragraph, faq paragraph.
msgid "<strong>To verify that ZenCache is working</strong>, navigate your site like a normal visitor would. Right-click on any page (choose View Source), then scroll to the very bottom of the document. At the bottom, you'll find comments that show ZenCache stats and information. You should also notice that page-to-page navigation is lightning fast compared to what you experienced prior to installing ZenCache."
msgstr ""

#. Found in installation paragraph, remaining content paragraph.
msgid "WordPress® Multisite Networking is a special consideration in WordPress®. If ZenCache is installed under a Multisite Network installation, it will be enabled for ALL blogs the same way. The centralized config options for ZenCache, can only be modified by a Super Administrator operating on the main site. ZenCache has internal processing routines that prevent configuration changes, including menu displays; for anyone other than a Super Administrator operating on the main site."
msgstr ""

#. Found in installation paragraph, faq paragraph, remaining content paragraph.
msgid "Ordinarily you can just deactivate ZenCache from the plugins menu in WordPress. However, if you're having a more serious issue, please follow the instructions here."
msgstr ""

#. Found in installation paragraph, faq paragraph, remaining content paragraph.
msgid "ZenCache is now completely uninstalled and you can start fresh :-)"
msgstr ""

#. Found in changelog list item.
msgid "<strong>Announcement: The next version of ZenCache will require PHP 5.4+.</strong> As of December 1st, 2015, the minimum PHP version required to run ZenCache will change to PHP 5.4+. This release of ZenCache will be the last version to support PHP 5.3. Please see announcement with further details: <a href=\"http://zencache.com/r/new-minimum-php-version-php-5-4/\">New Minimum PHP Version: PHP 5.4</a>"
msgstr ""

#. Found in changelog list item.
msgid "<strong>Announcement: The next version of ZenCache will not support the PHP APC Extension</strong>. As of December 1st, 2015, ZenCache will no longer run with the PHP APC extension enabled. Please see announcement with further details: <a href=\"http://zencache.com/r/php-apc-extension-no-longer-supported/\">PHP APC Extension No Longer Supported</a>"
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: Fixed a bug where a commented-out <code>WP_CACHE</code> definition in <code>wp-config.php</code> (such as what WP Super Cache leaves behind) was being incorrectly ignored and resulted in caching being silently disabled. Props @davidfavor. See <a href=\"https://github.com/websharks/zencache/issues/591\">Issue #591</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: Fixed a bug where, in some rare cases, <code>wp-config.php</code> would end up with two <code>WP_CACHE</code> definitions. See <a href=\"https://github.com/websharks/zencache/issues/509\">Issue #509</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Enhancement</strong>: Updated Text Domain throughout codebase in preparation for plugin import to translate.wordpress.org. See <a href=\"https://github.com/websharks/zencache/issues/576\">Issue #576</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: Fixed a Fatal Error when upgrading from v150629 to the latest version of ZenCache. This fatal error only occurred on sites that had <code>WP_DEBUG</code> enabled, at which point ZenCache failed to properly update <code>advanced-cache.php</code>. When <code>WP_DEBUG</code> was disabled, the new version of ZenCache was able to properly update <code>advanced-cache.php</code> and therefore the temporary failure was silent and inconsequential. This bug fix ensures that no fatal error will be produced when upgrading from v150629, even if <code>WP_DEBUG</code> is enabled. See <a href=\"https://github.com/websharks/zencache/issues/524\">Issue #524</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: This update reverts the codebase restructure released in the previous version (v150626). That release received several reports of Fatal Errors, however those issues only affected a small subset of ZenCache users. After extensive research, we discovered that this issue was related to a bug in PHP's APC Extension (which is commonly used on systems running PHP 5.3 and PHP 5.4). The restructured codebase in the previous release utilized a newer PHP feature (Closures) and that increased the likelihood of exposing that existing PHP bug. Since we can't fix the PHP bug directly and we want to continue supporting PHP 5.3.2+ and PHP 5.4 for now, we're reverting the ZenCache Lite codebase restructure to the previous version (v150409). The new ZenCache Lite features that were included in the previous release are still available in this release--only the structure of the codebase itself has changed. To read more about the PHP APC bug, see <a href=\"https://github.com/websharks/zencache/issues/511\">Issue #511</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Enhancement</strong>: The Pro Preview feature has been enhanced to improve usability. We also updated the Static CDN Filters section of the Pro Preview to include several new Static CDN Filter features."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Restructured Codebase</strong>: The entire ZenCache codebase has been restructured to improve performance, enhance flexibility, and make it easier to build in new features!"
msgstr ""

#. Found in changelog list item.
msgid "<strong>New Feature!</strong> The free version of ZenCache now supports several new options that were previously only available in the Pro version. You can now toggle the Auto-Clear Cache routines for the Home Page, Posts Page, Author Page, Category Archives, Tag Archives, Custom Term Archives, RSS/RDF/Atom Feeds, and XML Sitemaps. This gives you more control over exactly when ZenCache purges the cache for these parts of your site. See <em>ZenCache → Plugin Options → Clearing the Cache</em> for further details."
msgstr ""

#. Found in changelog list item.
msgid "<strong>New Feature!</strong> URI Exclusion Patterns are now available in ZenCache Lite! This previously Pro-only feature is now available in the free version of ZenCache and allows you to exclude a list of URIs from being cached by ZenCache. See <em>ZenCache → Plugin Options → URI Exclusion Patterns</em> for further details."
msgstr ""

#. Found in changelog list item.
msgid "<strong>New Feature!</strong> HTTP Referrer Exclusion Patterns are now available in ZenCache Lite! This previously Pro-only feature is now available in the free version of ZenCache and allows you to define a list of referring URLs or domains that send you traffic. When ZenCache sees a request coming from one of those URLs or domains, it will not cache that particular request. See <em>ZenCache → Plugin Options → HTTP Referrer Exclusion Patterns</em> for further details."
msgstr ""

#. Found in changelog list item.
msgid "<strong>New Pro Feature!</strong>: HTML Compression now supports compressing JSON (in addition to the already supported HTML, JavaScript, and CSS compression). Props @jaswsinc. See <a href=\"https://github.com/websharks/zencache/issues/469\">Issue #469</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>New Pro Feature!</strong>: Static CDN Filters now supports multiple CDN hostnames. This allows you to configure more than one CDN hostname, also referred to as Domain Sharding. This makes it possible for site owners to work around web browser concurrency limits, allowing the browser to download many resources simultaneously, which increases overall speed. Props to @isaumya and @jaswsinc. See <a href=\"https://github.com/websharks/zencache/issues/468\">Issue #468</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Enhancement</strong> (Pro): Static CDN Filters now includes proper support for WordPress Multisite Networks, including support for subdomains (full support for Domain Mapping coming in the next release). If you're running a WordPress Multisite Network and want to configure a CDN, see <a href=\"http://zencache.com/kb-article/static-cdn-filters-for-wordpress-multisite-networks/\">this KB Article</a> for further details."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Enhancement</strong> (Pro): Static CDN Filters now also apply to any static files that are referenced inside CSS files. Props @jaswsinc. See <a href=\"https://github.com/websharks/zencache/issues/461\">Issue #461</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Enhancement</strong>: Completed a major restructure of the entire codebase to improve modularity and dependency management. Props @jaswsinc."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Enhancement</strong> (Pro): Static CDN Filters now supports the ability to configure separate CDN hostname(s) for each domain (or subdomain) that you run in a WordPress Multisite Network. Props @jaswsinc. See <a href=\"https://github.com/websharks/zencache/issues/475\">Issue #475</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Enhancement</strong> (Pro): Static CDN Filters now support subdomains when ZenCache is running inside a WordPress Multisite Network. Props @jaswsinc. See <a href=\"https://github.com/websharks/zencache/issues/439\">Issue #439</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong> (Pro): Static CDN Filters were not being applied to the primary site on WP Multisite installations that used subdomains. Props to @isaumya for discovering this bug. See <a href=\"https://github.com/websharks/zencache/issues/470\">Issue #470</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Enhancement (includes improved CloudFlare support)</strong>: Improvements to IP address detection, including added support for CloudFlare IP forwarding, multiple IPs in a single header, and the ability to customize the lookup order and/or add/remove sources that are searched when looking for the current IP address. It's also possible to revert to the old IP address detection behavior (see <a href=\"http://zencache.com/kb-article/how-do-i-customize-ip-address-detection/\">How do I customize remote IP detection?</a>). Props @jaswsinc. <a href=\"https://github.com/websharks/zencache/pull/449\">Issue #449</a>"
msgstr ""

#. Found in changelog list item.
msgid "<strong>Enhancement</strong> (Pro): Files being served by the HTML Compressor were being sent without a <code>Vary: Accept-Encoding</code> header, which caused some page speed testing services to give a lower rating to sites using ZenCache. ZenCache now ensures this header is sent via an <code>.htaccess</code> file inside the HTML Compressor cache directory (requires Apache 2.1+). Props @jaswsinc. <a href=\"https://github.com/websharks/zencache/issues/436\">Issue #436</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Enhancement</strong> (Pro): Static CDN Filters now also filter any static resources inside Text Widgets, so that those resources can be cached by your CDN. Props @jaswsinc. <a href=\"https://github.com/websharks/zencache/issues/430\">Issue #430</a>"
msgstr ""

#. Found in changelog list item.
msgid "<strong>Enhancement</strong> (Pro): Static CDN Filters now apply to minified and compressed CSS/JS files generated by the HTML Compressor; these files will now be cached by your CDN. Props @jaswsinc. <a href=\"https://github.com/websharks/zencache/issues/429\">Issue #429</a>"
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: Fixed a bug related to the Quick Cache migration that resulted in caching being disabled despite ZenCache being enabled. Uninstalling Quick Cache was removing <code>define('WP_CACHE', TRUE);</code> from the <code>wp-config.php</code> file. ZenCache now makes sure that caching remains enabled after uninstalling Quick Cache during the ZenCache migration process. <a href=\"https://github.com/websharks/zencache/issues/450\">Issue #450</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: Fixed a minor UI issue where the ZenCache Dashboard icon would occasionally flash to a black color when refreshing the Dashboard. Props @jaswsinc. <a href=\"https://github.com/websharks/zencache/issues/453\">Issue #453</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: When ZenCache was running on an installation of PHP with <code>open_basedir</code> restrictions applied, calls to <code>is_dir()</code> were triggering a PHP Warning while looking for a writable temporary directory. This bug has been fixed. <a href=\"https://github.com/websharks/zencache/issues/456\">Issue #456</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: Fixed a bug where changing the permalink for a published post would result in the cache file for the old permalink being left behind and as a result both the old and the new permalink would be accessible, instead of WordPress redirecting the old permalink to the new one. This has been fixed and ZenCache now properly clears the old cache file when changing the permalink on a published post. <a href=\"https://github.com/websharks/zencache/issues/359\">Issue #359</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: Fixed a bug where transitioning a Published post back to Pending or Draft would not automatically clear the cache file. This resulted in the post remaining accessible on the frontend despite being set as Pending or Draft. ZenCache now properly clears the cache file automatically when transitioning from Published to Pending or Draft, which prevents access to the post as expected. <a href=\"https://github.com/websharks/zencache/issues/441\">Issue #441</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong> (Pro): Some users reported seeing <code>Warning: trim() expects parameter 1 to be string</code>. This was produced by a low-impact bug that has been fixed in this release. <a href=\"https://github.com/websharks/zencache/issues/455\">Issue #455</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong> (Pro): Some users running the HTML Compressor reported seeing 403 Forbidden errors related to loading the compressed/minified files. This was a permissions-related issue that has been resolved in this release. Props @superian and @jaswsinc. See <a href=\"https://github.com/websharks/html-compressor/issues/50\">Issue #50</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong> (Pro): Some HTTP requests made by the HTML Compressor to servers configured to reject HTTP requests that don't include a User-Agent were failing. A User-Agent is now always used in all requests. Props @jaswsinc. See <a href=\"https://github.com/websharks/html-compressor/issues/49\">Issue #49</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Minimum Required PHP Version Bumped to PHP v5.3.2+:</strong> The minimum PHP version required for ZenCache has been bumped up to PHP v5.3.2+ (from PHP v5.3+). The ZenCache cache locking mechanism, specifically the use of <code>flock()</code>, requires behavior introduced in PHP v5.3.2. <a href=\"https://github.com/websharks/zencache/issues/444\">Issue #444</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: Fixed a bug in the Quick Cache back compat. method <code>\\zencache\\share\\apply_wp_filters()</code>. It was not passing the ZenCache-filtered value through the Quick Cache back compat. routine. This bug affected sites that had disabled automatic cache clearing routines via a filter."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong> (Pro): Updated Static CDN Filters whitelist to include font file extensions <code>eot,ttf,otf,woff</code>, as site owners may wish to serve fonts with these extensions from the CDN (this would require a custom CORS configuration; see <a href=\"http://davidwalsh.name/cdn-fonts\">this article</a> for instructions). See <a href=\"https://github.com/websharks/zencache/issues/427\">#427</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong> (Pro): Updated Static CDN Filters blacklist to exclude font file extensions <code>eot,ttf,otf,woff</code> by default, as they require custom CORS configuration to display properly. See <a href=\"https://github.com/websharks/zencache/issues/427\">#427</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong> (Pro): The Static CDN Filters feature was calling a protected method that was requiring PHP v5.4+ but now the Static CDN Filters feature works with PHP v5.3+. See <a href=\"https://github.com/websharks/zencache/issues/426\">#426</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: Fixed a zero-byte <code>advanced-cache.php</code> bug related to migrating from Quick Cache. When you deleted/uninstalled Quick Cache after upgrading to ZenCache, the Quick Cache uninstallation process would empty the <code>advanced-cache.php</code> file, resulting in the site no longer being cached, despite ZenCache being active. ZenCache now continuously checks to make sure that <code>advanced-cache.php</code> is installed properly. See <a href=\"https://github.com/websharks/zencache/issues/432\">#432</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>New Pro Feature: CDN Integration:</strong> With the announcement and release of ZenCache we are excited to also announce a new, highly-requested feature: Static CDN Filters. This feature allows you to serve some and/or ALL static files on your site from a CDN of your choosing. See also: <a href=\"http://zencache.com/kb-article/introduction-to-static-cdn-filters/\">Introduction to Static CDN Filters</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Full Backwards Compatibility with Quick Cache and Quick Cache Pro:</strong> ZenCache is fully backwards compatible with all previous versions of Quick Cache Lite and Quick Cache Pro. Simply install ZenCache and your existing Quick Cache options will preserved by ZenCache."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong> (Pro): Fixed a bug where the Pro Updater would fail when FTP or SFTP details via the WordPress Dashboard are required to perform updates. Props @jaswsinc. See <a href=\"https://github.com/websharks/quick-cache/issues/389\">#389</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: Several fixes for a stubborn bug related to \"Fatal Error: 'Unable to clear dir'\" error messages and errors referencing \"SplFileInfo::getMTime(): stat failed\". Props @jaswsinc. See <a href=\"https://github.com/websharks/quick-cache/issues/397\">#397</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong> (Pro): Fixed a bug where the <code>qcAC</code> variable (used to force-enable/disable GET Request caching) was not respected properly whenever a URL contained a query string and a user was currently logged into the site. Props @jaswsinc. See <a href=\"https://github.com/websharks/quick-cache/issues/401\">#401</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: Addressed another issue related to \"Fatal Error: 'Unable to clear dir'\" and tmp directories that don't get cleared by Quick Cache. This fix discards iteration references before renaming the tmp directories. Props @jaswsinc. See <a href=\"https://github.com/websharks/quick-cache/issues/288\">#288</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: We have had a few reports of getMTime Stat failing when clearing the cache. This fix clears the Stat Cache before iteration when deleting files from the cache directory. Props @jaswsinc. See <a href=\"https://github.com/websharks/quick-cache/issues/385\">#385</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Enhancement</strong>: Added a new filter (<code>quick_cache\\\\share_disable_cache_locking</code>) to allow disabling cache locking. Simply return boolean <code>TRUE</code> to this filter to disable cache locking. This may be useful for site owners who are experiencing issues with cache locking on web hosting platforms with filesystems that don't properly support locking. Note that this filter must be applied using an Advanced Cache Plugin (see <strong>Dashboard → Quick Cache → Plugin Options → Theme/Plugin Developers</strong>). See also <a href=\"https://github.com/websharks/quick-cache/issues/387\">#387</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Enhancement</strong>: Added a new filter that allows forcing Semaphore cache locking on hosting platforms where <code>sem_get()</code> is available and would result in improved performance. Return <code>sem</code> to the <code>quick_cache\\\\share::cache_lock_lock_type</code> filter to force Semaphore cache locking, or <code>flock</code> to use the default method that uses <code>flock()</code>. Note that this filter must be applied using an Advanced Cache Plugin (see <strong>Dashboard → Quick Cache → Plugin Options → Theme/Plugin Developers</strong>). See also <a href=\"https://github.com/websharks/quick-cache/issues/387\">#387</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: Addressed another issue with \"Fatal Error: 'Unable to clear dir'\" messages by adding new blocking methods for cache lock and unlock, making it so that cache writes (including clearing, purging, wiping) all gain an exclusive lock on the cache directory while work is underway. Props @jaswsinc. See <a href=\"https://github.com/websharks/quick-cache/issues/288\">#288</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: Fixed a Home Page clearing bug that arose in the previous release as the result of an extra leading <code>\\/</code> in one of our regex patterns. Props @jaswsinc. See <a href=\"https://github.com/websharks/quick-cache/issues/365\">#365</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Quick Cache is changing its name to ZenCache!</strong> See <a href=\"http://www.websharks-inc.com/post/quick-cache-is-changing-its-name/\">the blog post</a> for full details."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Enhancement</strong>: All dashboard notices will now include the number of files cleared for each notice.  Props @jaswsinc. See <a href=\"https://github.com/websharks/quick-cache/pull/351\">#351</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Enhancement</strong>:  Quick Cache is now capable of doing atomic clearing/purging/wiping. On a Multisite network, this is now accomplished on a blog-specific basis, without needing to scan the entire network-wide cache directory. This should improve performance considerably on large networks (i.e. those with VERY large cache directories). Props @jaswsinc. See <a href=\"https://github.com/websharks/quick-cache/issues/288\">#288</a> and <a href=\"https://github.com/websharks/quick-cache/pull/351\">#351</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Enhancement</strong>: Added a new class file (<code>/includes/utils-feed.php</code>) and refactored the XML feed clearing routine. With these utilities in place, the <code>auto_clear_xml_feeds_cache()</code> method is now much easier to deal with and comprehend. Props @jaswsinc. See <a href=\"https://github.com/websharks/quick-cache/pull/351\">#351</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Enhancement</strong>: Quick Cache now scans each scheme sub-directory, i.e. <code>/http/</code> and <code>/https/</code>, separately to help break apart what was previously a much larger directory scan for sites that serve pages over both schemes. This will improve performance on both standard and Multisite network installs. See <a href=\"https://github.com/websharks/quick-cache/pull/351\">#351</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Enhancement</strong>: Refactored codebase to improve modularity by creating new methods in <code>includes/share.php</code> for network-wide clearing/purging/wiping, host/blog-specific clearing/purging/wiping, recursively deleting a directory, assisting in translations, and several new string utilities. Props @jaswsinc. See <a href=\"https://github.com/websharks/quick-cache/pull/351\">#351</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Enhancement</strong>: Renamed all <code>\\quick_cache\\plugin::auto_purge_*</code> methods, giving them the proper prefix of <code>auto_clear_*</code> instead to reflect proper Wipe/Clear/Purge terminology. Along with this, all of the <code>auto_purge_</code> option keys have been renamed as well. See new <a href=\"http://www.websharks-inc.com/r/quick-cache-wipeclearpurge-terminology-wiki/\">Wipe/Clear/Purge wiki article</a> for a description of these terms. Props @jaswsinc. See <a href=\"https://github.com/websharks/quick-cache/pull/351\">#351</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Enhancement</strong>: All URI and Referrer exclusion patterns are now caSe insensitive. WordPress v4.0 will serve URIs without cAse sensitivity. All of the Quick Cache codebase has been updated to support caSe insensitive clearing/purging/wiping; along with caSe insensitive pattern matching against URIs. Props @jaswsinc. See <a href=\"https://github.com/websharks/quick-cache/pull/351\">#351</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix (Pro)</strong>: Fixed a bug with the Auto-Clear Author Cache routine that was presenting dashboard notices even when <code>change_notifications_enable</code> was off. Props @jaswsinc. See <a href=\"https://github.com/websharks/quick-cache/pull/351\">#351</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix (Pro)</strong>: Fixed a bug with the HTML Compressor where <code>style</code>, <code>link</code> and/or <code>script</code> tags could become out of order in certain scenarios. See: <a href=\"https://github.com/websharks/html-compressor/issues/45\">#45</a>"
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix (Pro)</strong>: Several HTML Compressor bug fixes related to JavaScript compression routines. See <a href=\"https://github.com/websharks/html-compressor/issues/38\">#38</a>"
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: Fixed a bug that was occasionally generating \"Fatal Error: 'Unable to clear dir'\" messages. The root cause of this is believed to be non-atomic purging of cache directories which, on a busy site, could result in new cache files being created before a purging routine was finished clearing the directory. Clearing/purging/wiping is now atomic in all scenarios. Props @jaswsinc. See <a href=\"https://github.com/websharks/quick-cache/issues/288\">#288</a> and <a href=\"https://github.com/websharks/quick-cache/pull/351\">#351</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: Fixed a bug in the Auto-Clear Custom Post Type Archive Cache that was not checking for the <code>$post_id</code> in <code>$this-&gt;static[__FUNCTION__]</code>. Props @jaswsinc. See <a href=\"https://github.com/websharks/quick-cache/pull/351\">#351</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: Fixed a bug with the uninstaller whereby attempting to uninstall after receiving a notice that PHP 5.3+ is required would result in a blank screen and require manual removal of the plugin. See <a href=\"https://github.com/websharks/quick-cache/issues/334\">#334</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: Fixed an issue with detecting cacheable requests that was, in rare instances, resulting in blank white pages for some site owners. See <a href=\"https://github.com/websharks/quick-cache/issues/279\">#279</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Enhancement</strong>: Improved Dashboard messaging for the <code>auto_clear_cache()</code> routine. See <a href=\"https://github.com/websharks/quick-cache/issues/328\">#328</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Enhancement (Pro)</strong>: Improved consistency of Auto-Cache Engine User-Agent string by removing WordPress-version-specific identifier. See <a href=\"https://github.com/websharks/quick-cache/issues/315\">#315</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Enhancement (Pro)</strong>: It is now possible to disable the automatic clear and wipe cache routines. If you have a very large site with many cache files, this feature allows you manual control over when the cache gets cleared or wiped. For complete documentation on this feature, see <a href=\"https://github.com/websharks/quick-cache/wiki/Clear-Cache-and-Wipe-Cache-Routines\">Quick Cache Wiki - Clear and Wipe Cache Routines</a>. See also <a href=\"https://github.com/websharks/quick-cache/issues/23\">#23</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: Fixes an issue with the Pro Preview mode where saving the plugin options may inadvertently save Pro-only options that could later cause issues if the plugin is upgraded to the Pro version. See <a href=\"https://github.com/websharks/quick-cache/pull/311#issuecomment-54491922\">#311</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: Fixes an edge-case where the proper cache files do not get purged when a user with the Editor role publishes a new post with both a category and a tag associated with the post. See <a href=\"https://github.com/websharks/quick-cache/issues/313\">#313</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: When Quick Cache purges/resets the cache for a post with a Custom Post Type, any cache files for the associated Custom Post Type archive view are now auto-purged, along with any associated XML feed cache files. See <a href=\"https://github.com/websharks/quick-cache/issues/280\">#280</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: Fixed missing trailing slash in Directory / Expiration Time configuration panel. This was purely a visual inconsistency and had no effect on Quick Cache's functionality. See <a href=\"https://github.com/websharks/quick-cache/issues/267\">#267</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: When saving custom CSS using JetPack's Custom CSS module, Quick Cache now properly purges the site cache to ensure that outdated cache files are not served to visitors. See <a href=\"https://github.com/websharks/quick-cache/issues/246\">#246</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: When changes are made to WordPress General, Reading, Discussion, or Permalink settings (Dashboard -&gt; Settings), Quick Cache now clears the cache to prevent an outdated cache file from being served to visitors. See <a href=\"https://github.com/websharks/quick-cache/issues/223\">#223</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: When an active plugin is updated, or when an active theme or the parent theme for an active child theme is updated, or when WordPress Core is updated, Quick Cache now properly clears the cache to ensure that an outdated cache file does not get served to a visitor. See <a href=\"https://github.com/websharks/quick-cache/issues/145\">#145</a> and <a href=\"https://github.com/websharks/quick-cache/issues/327\">#327</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix</strong>: When a new comment is posted, Quick Cache now properly purges the cache files for any paginated comment pages. See <a href=\"https://github.com/websharks/quick-cache/issues/336\">#336</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix (Pro)</strong>: Fixed a bug where the HTML Compressor, when enabled with the \"remove extra whitespace in the final HTML\" option, would incorrectly remove <code>&lt;!DOCTYPE html&gt;</code>. See <a href=\"https://github.com/websharks/quick-cache/issues/299\">#299</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix (Pro)</strong>: Fixed a bug in the HTML Compressor that would, in certain scenarios, leave behind fragments of HTML comments. See <a href=\"https://github.com/websharks/quick-cache/issues/295\">#295</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix (Pro)</strong>: The Auto-Cache Engine now has an option to configure a delay between each request when pre-caching the site. There were some reports of the Auto-Cache Engine causing load issues with large sites on servers that sometimes had trouble handling many requests. See <a href=\"https://github.com/websharks/quick-cache/issues/294\">#294</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix (Pro)</strong>: Fixes an Auto-Cache Engine scheduling issue that may, in some scenarios, prevent it from running as expected. See <a href=\"https://github.com/websharks/quick-cache/issues/291\">#291</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix (Pro)</strong>: Fixed a bug with the HTML Compressor where <code>style</code>, <code>link</code> and/or <code>script</code> tags could end up out of order in certain scenarios. See <a href=\"https://github.com/websharks/html-compressor/issues/45\">#45</a>."
msgstr ""

#. Found in changelog list item.
msgid "<strong>Bug Fix (Pro)</strong>: Fixed a bug in the HTML Compressor related to JavaScript compression routines. See <a href=\"https://github.com/websharks/html-compressor/issues/38\">#38</a>."
msgstr ""

#. Found in changelog paragraph.
msgid "<strong>Announcing ZenCache, formerly Quick Cache!</strong>"
msgstr ""

#. Found in changelog paragraph.
msgid "We are very excited to announce the release of <a href=\"http://zencache.com\">ZenCache</a>, an advanced WordPress caching plugin inspired by simplicity. ZenCache is the successor to Quick Cache, a very popular WordPress caching plugin that has been downloaded over 1 million times and won acclaim for its speed, simplicity, and ease of configuration. <a href=\"http://zencache.com/announcing-zencache-formerly-quick-cache/\">Read the full announcement here</a>."
msgstr ""

#. Found in changelog paragraph.
msgid "ZenCache is an evolution of Quick Cache. It comes with a completely refactored codebase, subtle UI enhancements, internal optimizations; along with full backward compatibility with all previous versions of Quick Cache Lite and Quick Cache Pro. In fact, installing ZenCache on a site that was previously running Quick Cache is a piece of cake! Watch <a href=\"http://zencache.com/kb-article/how-to-migrate-from-quick-cache-lite-to-zencache-lite/\">this video</a> to learn more. All configuration options are preserved."
msgstr ""

#. Found in changelog paragraph.
msgid "For older Changelog entries, please see the <code>CHANGELOG</code> file."
msgstr ""

#. Found in faq header.
msgid "I already have Quick Cache installed; how do I install ZenCache?"
msgstr ""

#. Found in faq header.
msgid "How do I know that ZenCache is working the way it should be?"
msgstr ""

#. Found in faq header.
msgid "What is the down side to running ZenCache?"
msgstr ""

#. Found in faq header.
msgid "So why does WordPress® need to be cached?"
msgstr ""

#. Found in faq header.
msgid "Where &amp; why are the cache files stored on my server?"
msgstr ""

#. Found in faq header.
msgid "What happens if a user logs in? Are cache files used then?"
msgstr ""

#. Found in faq header.
msgid "Will comments and other dynamic parts of my blog update immediately?"
msgstr ""

#. Found in faq header.
msgid "How do I enable GZIP compression? Is GZIP supported?"
msgstr ""

#. Found in faq header.
msgid "I'm a plugin developer. How can I prevent certain files from being cached?"
msgstr ""

#. Found in faq header.
msgid "What should my expiration setting be?"
msgstr ""

#. Found in faq header.
msgid "EMERGENCY: If all else fails, how can I remove ZenCache?"
msgstr ""

#. Found in faq paragraph.
msgid "ZenCache is the successor to Quick Cache and will automatically detect any existing Quick Cache options and migrate those options over to ZenCache. For further details, please see the <a href=\"http://zencache.com/kb-article/how-to-migrate-from-quick-cache-lite-to-zencache-lite/\">migration FAQ</a>."
msgstr ""

#. Found in faq paragraph.
msgid "First of all, make sure that you've enabled ZenCache. After you activate the plugin, go to the ZenCache options panel and enable it, then scroll to the bottom and click Save All Changes. All of the other options on that page are already pre-configured for typical usage. Skip them all for now. You can go back through all of them later and fine-tune things the way you like them."
msgstr ""

#. Found in faq paragraph.
msgid "There is NOT one! ZenCache is a MUST HAVE for every WordPress® powered site. In fact, we really can't think of any site running WordPress® that would want to be without it. To put it another way, the WordPress® software itself comes with a built in action reference for an <code>advanced-cache.php</code> file, because WordPress® developers realize the importance of such as plugin. The <code>/wp-content/advanced-cache.php</code> file is named as such, because the WordPress® developers expect it to be there when caching is enabled by a plugin. If you don't have the <code>/wp-content/advanced-cache.php</code> file yet, it is because you have not enabled ZenCache from the options panel yet."
msgstr ""

#. Found in faq paragraph, remaining content paragraph.
msgid "To understand how ZenCache works, first you have to understand what a cached file is, and why it is absolutely necessary for your site and every visitor that comes to it. WordPress® (by its very definition) is a database-driven publishing platform. That means you have all these great tools on the back-end of your site to work with, but it also means that every time a Post/Page/Category is accessed on your site, dozens of connections to the database have to be made, and literally thousands of PHP routines run in harmony behind-the-scenes to make everything jive. The problem is, for every request that a browser sends to your site, all of these routines and connections have to be made (yes, every single time). Geesh, what a waste of processing power, memory, and other system resources. After all, most of the content on your site remains the same for at least a few minutes at a time. If you've been using WordPress® for very long, you've probably noticed that (on average) your site does not load up as fast as other sites on the web. Now you know why!"
msgstr ""

#. Found in faq paragraph, remaining content paragraph.
msgid "In computer science, a cache (pronounced /kash/) is a collection of data duplicating original values stored elsewhere or computed earlier, where the original data is expensive to fetch (owing to longer access time) or to compute, compared to the cost of reading the cache. In other words, a cache is a temporary storage area where frequently accessed data can be stored for rapid access. Once the data is stored in the cache, it can be used in the future by accessing the cached copy rather than re-fetching or recomputing the original data."
msgstr ""

#. Found in faq paragraph.
msgid "The cache files are stored in a special directory: <code>/wp-content/cache/zencache</code>. This directory needs to remain writable, just like the <code>/wp-content/uploads</code> directory on many WordPress® installations. The <code>/zencache/cache</code> directory is where cache files reside. These files are stored using an intutive directory structure that named based on the request URL (<code>HTTPS/HTTP_HOST/REQUEST_URI</code>). See also: <strong>Dashboard -› ZenCache -› Cache Directory/Expiration Time</strong> for further details."
msgstr ""

#. Found in faq paragraph.
msgid "Whenever a request comes in from someone on the web, ZenCache checks to see if it can serve a cached file; e.g. it looks at the <code>HTTPS/HTTP_HOST/REQUEST_URI</code> environent variables, then it checks the <code>/zencache/cache</code> directory. If a cache file has been built already, and it matches an existing <code>HTTPS.HTTP_HOST.REQUEST_URI</code> combination; and it is not too old (see: <strong>Dashboard -› ZenCache -› Cache Directory/Expiration Time</strong>), then it will serve that file instead of asking WordPress® to regenerate it. This adds tremendous speed to your site and reduces server load."
msgstr ""

#. Found in faq paragraph.
msgid "If you have GZIP compression enabled, then the cache file is also sent to the browser with compression (recommended). Modern web browsers that support this technique will definitely take advantage of it. After all, if it is easier to email a zip file, it's also easier to download a web page that way. That is why on-the-fly GZIP compression for web pages is recommended. This is supported by all modern browsers."
msgstr ""

#. Found in faq paragraph, remaining content paragraph.
msgid "If you want to enable GZIP, create an <code>.htaccess</code> file in your WordPress® installation directory and put the following few lines in it. Alternatively, if you already have an <code>.htaccess</code> file, just add these lines to it, and that is all there is to it. GZIP is now enabled!"
msgstr ""

#. Found in faq paragraph, remaining content paragraph.
msgid "If your installation of Apache does not have <code>mod_deflate</code> installed. You can also enable GZIP compression using PHP configuration alone. In your <code>php.ini</code> file, you can simply add the following line anywhere: <code>zlib.output_compression = on</code>"
msgstr ""

#. Found in faq paragraph.
msgid "By default, ZenCache does NOT serve cached pages to users who are logged in, or to users who have left comments recently. ZenCache also excludes administrative pages, login pages, POST/PUT/DELETE/GET(w/ query string) requests and/or CLI processes. That being said, the Pro version of ZenCache DOES make it possible to cache pages even when users ARE logged-in; adding even more speed! This is particularly helpful on membership sites; e.g. sites that run plugins like s2Member™ for instance."
msgstr ""

#. Found in faq paragraph.
msgid "It depends on your configuration of ZenCache. There is an automatic expiration system (the garbage collector), which runs through WordPress® behind-the-scene, according to your Expiration setting (see: <strong>Dashboard -› ZenCache -› Cache Directory/Expiration Time</strong>). There is also a built-in expiration time on existing files that is checked before any cache file is served up, which also uses your Expiration setting. In addition; whenever you update a Post or a Page, ZenCache can automatically prune that particular file from the cache so it instantly becomes fresh again. Otherwise, your visitors would need to wait for the previous cached version to expire."
msgstr ""

#. Found in faq paragraph.
msgid "By default, ZenCache does NOT serve cached pages to users who are logged in, or to users who have left comments recently. ZenCache also excludes administrative pages, login pages, POST/PUT/DELETE/GET(w/ query string) requests and/or CLI processes."
msgstr ""

#. Found in faq paragraph.
msgid "There is no need to use an <code>.htaccess</code> file with this plugin; caching is handled by WordPress®/PHP alone. That being said, if you also want to take advantage of GZIP compression (and we do recommend this), then you WILL need an <code>.htaccess</code> file to accomplish that part. This plugin fully supports GZIP compression on its output. However, it does not handle GZIP compression directly. We purposely left GZIP compression out of this plugin, because GZIP compression is something that should really be enabled at the Apache level or inside your <code>php.ini</code> file. GZIP compression can be used for things like JavaScript and CSS files as well, so why bother turning it on for only WordPress-generated pages when you can enable GZIP at the server level and cover all the bases!"
msgstr ""

#. Found in faq paragraph.
msgid "If your installation of Apache does not have <code>mod_deflate</code> installed. You can also enable gzip compression using PHP configuration alone. In your <code>php.ini</code> file, you can simply add the following line anywhere: <code>zlib.output_compression = on</code>"
msgstr ""

#. Found in faq paragraph.
msgid "When your script finishes execution, ZenCache will know that it should NOT cache that particular page. It does not matter where or when you define this Constant; e.g. <code>define('ZENCACHE_ALLOWED', FALSE);</code> because ZenCache is the last thing to run during execution. So as long as you define this Constant at some point in your routines, everything will be fine."
msgstr ""

#. Found in faq paragraph.
msgid "ZenCache also provides support for <code>define('DONOTCACHEPAGE', TRUE)</code>, which is used by the WP Super Cache plugin as well. Another option is: <code>$_SERVER['ZENCACHE_ALLOWED'] = FALSE</code>. The <code>$_SERVER</code> array method is useful if you need to disable caching at the Apache level using <code>mod_rewrite</code>. The <code>$_SERVER</code> array is filled with all environment variables, so if you use <code>mod_rewrite</code> to set the <code>ZENCACHE_ALLOWED</code> environment variable, that will end up in <code>$_SERVER['ZENCACHE_ALLOWED']</code>. All of these methods have the same end result, so it's up to you which one you'd like to use."
msgstr ""

#. Found in faq paragraph.
msgid "If you don't update your site much, you could set this to <code>6 months</code>; optimizing everything even further. The longer the cache expiration time is, the greater your performance gain. Alternatively, the shorter the expiration time, the fresher everything will remain on your site. A default value of <code>7 days</code> (recommended expiration time), is a good conservative middle-ground."
msgstr ""

#. Found in faq paragraph.
msgid "Keep in mind that your expiration setting is only one part of the big picture. ZenCache will also purge the cache automatically as changes are made to the site (i.e. you edit a post, someone comments on a post, you change your theme, you add a new navigation menu item, etc., etc.). Thus, your expiration time is really just a fallback; e.g. the maximum amount of time that a cache file could ever possibly live."
msgstr ""

#. Found in faq paragraph.
msgid "That being said, you could set this to just <code>60 seconds</code> and you would still see huge differences in speed and performance. If you're just starting out with ZenCache (perhaps a bit nervous about old cache files being served to your visitors); you could set this to something like <code>30 minutes</code> and experiment with it while you build confidence in ZenCache. It's not necessary, but many site owners have reported this makes them feel like they're more-in-control when the cache has a short expiration time. All-in-all, it's a matter of preference :-)"
msgstr ""

#. Found in remaining content header.
msgid "Further Details"
msgstr ""

#. Found in remaining content header.
msgid "So Why Does WordPress® Need To Be Cached?"
msgstr ""

#. Found in remaining content header.
msgid "The Definition Of A Cached File (from the Wikipedia)"
msgstr ""

#. Found in remaining content header.
msgid "Prepare To Be Amazed / It's Time To Speed Things Up"
msgstr ""

#. Found in remaining content header.
msgid "How To Enable GZIP Compression for Even Greater Speeds"
msgstr ""

#. Found in remaining content header.
msgid "ZenCache Pro Features"
msgstr ""

#. Found in remaining content header.
msgid "Pro Installation"
msgstr ""

#. Found in remaining content header.
msgid "Software Requirements"
msgstr ""

#. Found in remaining content header.
msgid "License"
msgstr ""

#. Found in remaining content header.
msgid "Credits / Additional Acknowledgments"
msgstr ""

#. Found in remaining content list item.
msgid "Deactivate and delete ZenCache Lite, if it is currently installed"
msgstr ""

#. Found in remaining content list item.
msgid "Download ZenCache Pro from your account at WebSharks-Inc.com"
msgstr ""

#. Found in remaining content list item.
msgid "From your WordPress Dashboard, go to <strong>Dashboard -&gt; Plugins -&gt; Add New</strong> and then click on the <strong>Upload Plugin</strong> button at the top"
msgstr ""

#. Found in remaining content list item.
msgid "Select the ZenCache Pro zip file you downloaded in step 2 and click \"Install Now\""
msgstr ""

#. Found in remaining content list item.
msgid "After the plugin finishes installing, click the \"Activate Plugin\" link"
msgstr ""

#. Found in remaining content list item.
msgid "PHP 5.3.2+"
msgstr ""

#. Found in remaining content list item.
msgid "Apache 2.1+"
msgstr ""

#. Found in remaining content list item.
msgid "GPL License <a href=\"http://codex.wordpress.org/GPL\">http://codex.wordpress.org/GPL</a>"
msgstr ""

#. Found in remaining content list item.
msgid "WordPress® <a href=\"http://wordpress.org\">http://wordpress.org</a>"
msgstr ""

#. Found in remaining content list item.
msgid "GPL-Compatible License <a href=\"http://jquery.org/license\">http://jquery.org/license</a>"
msgstr ""

#. Found in remaining content list item.
msgid "jQuery <a href=\"http://jquery.com/\">http://jquery.com/</a>"
msgstr ""

#. Found in remaining content list item.
msgid "GPL-Compatible License <a href=\"http://getbootstrap.com/getting-started/#license-faqs\">http://getbootstrap.com/getting-started/#license-faqs</a>"
msgstr ""

#. Found in remaining content list item.
msgid "Bootstrap <a href=\"http://getbootstrap.com/\">http://getbootstrap.com/</a>"
msgstr ""

#. Found in remaining content list item.
msgid "GPL-Compatible License <a href=\"http://fortawesome.github.io/Font-Awesome/license/\">http://fortawesome.github.io/Font-Awesome/license/</a>"
msgstr ""

#. Found in remaining content list item.
msgid "Font Awesome <a href=\"http://fortawesome.github.io/Font-Awesome/\">http://fortawesome.github.io/Font-Awesome/</a>"
msgstr ""

#. Found in remaining content paragraph.
msgid "ZenCache is extremely reliable, because it runs completely in PHP code, and does not hand important decisions off to the <code>mod_rewrite</code> engine or browser cache; also making ZenCache MUCH easier to setup and configure."
msgstr ""

#. Found in remaining content paragraph.
msgid "In addition, ZenCache actually sends a no-cache header (yes, a no-cache header); which allows it to remain in control at all times. It might seem weird that a caching plugin would send a no-cache header :-). Well, no-cache headers are a key component in this plugin, and they will NOT affect performance negatively. On the contrary, this is how the system can accurately serve cache files to public users vs. users who are logged-in, commenters, etc."
msgstr ""

#. Found in remaining content paragraph.
msgid "You don't have to use an <code>.htaccess</code> file to enjoy the performance enhancements provided by this plugin; caching is handled by WordPress®/PHP alone. That being said, if you want to take advantage of GZIP compression (and we do recommend this), then you WILL need an <code>.htaccess</code> file to accomplish that part. This plugin fully supports GZIP compression on its output. However, it does not handle GZIP compression directly. We purposely left GZIP compression out of this plugin, because GZIP compression is something that should really be enabled at the Apache level or inside your <code>php.ini</code> file. GZIP compression can be used for things like JavaScript and CSS files as well, so why bother turning it on for only WordPress-generated pages when you can enable GZIP at the server level and cover all the bases!"
msgstr ""

#. Found in remaining content paragraph.
msgid "<strong>TIP:</strong> you can preview Pro features in the free version by clicking the \"<strong>Preview Pro Features</strong>\" link at the top of your ZenCache options."
msgstr ""

#. Found in remaining content paragraph.
msgid "ZenCache Pro is a wholly contained plugin that <em>does not</em> require ZenCache Lite to be installed. To install ZenCache Pro,"
msgstr ""

#. Found in remaining content paragraph.
msgid "Once the plugin is active, you can go to <strong>Dashboard -&gt; ZenCache -&gt; Plugin Options -&gt; Enable/Disable</strong> and Enable ZenCache."
msgstr ""

#. Found in remaining content paragraph.
msgid "Also, to stay updated with the latest version of ZenCache Pro, be sure to also configure <strong>Dashboard -&gt; ZenCache -&gt; Plugin Updater</strong>."
msgstr ""

#. Found in remaining content paragraph.
msgid "In addition to the <a href=\"http://wordpress.org/about/requirements/\">WordPress Requirements</a>, ZenCache requires the following minimum versions:"
msgstr ""

#. Found in remaining content paragraph.
msgid "Copyright: © 2013 <a href=\"http://www.websharks-inc.com/bizdev/\">WebSharks, Inc.</a> (coded in the USA)"
msgstr ""

#. Found in remaining content paragraph.
msgid "Released under the terms of the <a href=\"http://www.gnu.org/licenses/gpl-2.0.html\">GNU General Public License</a>."
msgstr ""